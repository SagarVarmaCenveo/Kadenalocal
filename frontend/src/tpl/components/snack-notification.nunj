{% import "macro/svg.nunj" as svg %}

<div class="js-notification" data-notification-max="3" data-time-for-animation="250" data-time-to-remove="5000">
  <div class="snack-notification snack-notification--info" data-notification-type="info">
    <span class="snack-notification__text">Some text</span>
    <button type="button" class="snack-notification__btn js-notification-closer">
      {% call svg.template(class = '') %}
      {{svg.use(name='cross--thin--white')}}
      {% endcall %}
      <span>Got it</span>
    </button>
  </div>

  <div class="snack-notification snack-notification--warning" data-notification-type="warning">
    <span class="snack-notification__text">Some text</span>
    <button type="button" class="snack-notification__btn js-notification-closer">
      {% call svg.template(class = '') %}
      {{svg.use(name='cross--thin')}}
      {% endcall %}
      <span>Got it</span>
    </button>
  </div>

  <div class="snack-notification snack-notification--error" data-notification-type="error">
    <span class="snack-notification__text">Some text</span>
    <button type="button" class="snack-notification__btn js-notification-closer">
      {% call svg.template(class = '') %}
      {{svg.use(name='cross--thin--white')}}
      {% endcall %}
      <span>Got it</span>
    </button>
  </div>

  <div class="snack-notification snack-notification--success" data-notification-type="success">
    <span class="snack-notification__text">Some text</span>
    <button type="button" class="snack-notification__btn js-notification-closer">
      {% call svg.template(class = '') %}
      {{svg.use(name='cross--thin--white')}}
      {% endcall %}
      <span>Got it</span>
    </button>
  </div>
</div>


<script>
  'use strict';

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Notification = function () {
    function Notification(container) {
      _classCallCheck(this, Notification);

      this.container = container;
      this.timeForAnimation = +container.dataset.timeForAnimation;
      this.timeToRemove = +container.dataset.timeToRemove;

      var MAX_SIZE = 3;
      this.notification = {};
      for (var i = 1; i <= MAX_SIZE; i += 1) {
        this.notification[i] = undefined;
      }
    }

    Notification.prototype.addNotification = function addNotification(type) {
      var _this = this;
      hideLastElement();
      changeRestElements();
      showNewNotification(type);

      function hideLastElement() {
        var lastNumber = Object.keys(_this.notification).length;
        var element = _this.notification[lastNumber];
        if (element) {
          element.classList.add('hide');
          _this.notification[lastNumber] = undefined;
          setTimeout(function () {
            element.remove();
          }, _this.timeForAnimation);
        }
      }

      function changeRestElements() {
        var elementNumbers = Object.keys(_this.notification).length;
        for (var index = elementNumbers; index > 0; index -= 1) {
          if (index !== elementNumbers) {
            var element = _this.notification[index];
            if (element) {
              element.classList.remove('show-' + index);
              var newIndex = index + 1;
              element.classList.add('show-' + newIndex);
              _this.notification[newIndex] = element;
            }
          }
        }
      }

      function showNewNotification(type) {
        var newElement = createNewNotification(type);
        _this.notification[1] = newElement;
        _this.container.appendChild(newElement);
        setTimeout(function () {
          newElement.classList.add('show-1');
        }, 0);

        setTimeout(function () {
          newElement.classList.add('hide');
        }, _this.timeToRemove);

        setTimeout(function () {
          newElement.remove();
        }, _this.timeForAnimation + _this.timeToRemove);
      }

      function createNewNotification(type) {
        var idealElement = _this.container.querySelector('[data-notification-type="' + type + '"]');
        var newElement = idealElement.cloneNode(true);
        var closer = newElement.querySelector('.js-notification-closer');

        closer.addEventListener('click', function (event) {
          var notification = event.currentTarget.parentNode;
          notification.classList.add('hide');

          pullDownNotificationsAbove(notification);

          setTimeout(function () {
            notification.remove();
          }, _this.timeForAnimation);
        });

        return newElement;
      }

      function pullDownNotificationsAbove(notification) {
        var keys = Object.keys(_this.notification);
        var values = Object.values(_this.notification);
        var value = values.indexOf(notification);
        var key = keys[value];
        _this.notification[key] = undefined;

        Object.keys(_this.notification).forEach(function (index) {
          if (index > key && _this.notification[index]) {
            var element = _this.notification[index];
            var newIndex = index - 1;
            element.classList.remove('show-' + index);
            element.classList.add('show-' + newIndex);
            _this.notification[newIndex] = element;
            _this.notification[index] = undefined;
          }
        });
      }
    };

    return Notification;
  }();

  var notification = new Notification(document.querySelector('.js-notification'));
</script>
